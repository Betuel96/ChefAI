rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Allow users to read their own document in the 'users' collection
    match /users/{userId} {
      allow get: if request.auth != null; // Any authenticated user can read a profile
      allow update: if request.auth.uid == userId; // Only owner can update their profile
      
      // Allow creation only if the user is creating their own document
      allow create: if request.auth.uid == userId;
    }
    
    // Secure the 'usernames' collection for uniqueness
    match /usernames/{username} {
      // Allow reads for existence checks
      allow get: if request.auth != null;
      // Allow creation only if a document with that name doesn't exist yet
      allow create: if request.auth != null && !exists(path);
      // Allow deletion only by the user associated with that username
      allow delete: if request.auth.uid == resource.data.userId;
    }
    
    // Rules for user-specific subcollections (recipes, menus)
    match /users/{userId}/{collection}/{docId} {
      // Allow owners to read and write to their own subcollections
      allow read, write, delete: if request.auth.uid == userId;
    }
    
    // Rules for published recipes/posts
    match /published_recipes/{postId} {
      // Anyone can read a published post
      allow get: if true;
      
      // Only authenticated users can create posts
      allow create: if request.auth != null && request.resource.data.publisherId == request.auth.uid;
      
      // Only the original publisher can update or delete their own post
      allow update, delete: if request.auth.uid == resource.data.publisherId;
    }
    
    // Rules for comments on posts
    match /published_recipes/{postId}/comments/{commentId} {
      // Anyone can read comments
      allow list, get: if true;
      // Only authenticated users can create comments
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only the author of the comment can update or delete it
      allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    // Rules for likes on posts and comments
    match /published_recipes/{postId}/{subcollection=**}/likes/{userId} {
      // A user can only like/unlike for themselves
      allow create, delete: if request.auth.uid == userId;
      // Anyone can read who liked a post/comment
      allow get: if true;
    }
  }
}
