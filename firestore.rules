
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // - Anyone can create a user document (on signup).
    // - Only the authenticated user can read or update their own document.
    // - This allows users to manage their own profile info and premium status.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // RECIPES subcollection
      // - Users can create, read, update, and delete their own recipes.
      match /recipes/{recipeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // MENUS subcollection
      // - Users can create, read, and delete their own weekly menus.
      match /menus/{menuId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // FOLLOWING subcollection
      // - Users can manage their own list of people they follow.
      match /following/{followedId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // FOLLOWERS subcollection
      // - Other authenticated users can add/remove themselves from this user's followers list.
      match /followers/{followerId} {
         allow read: if request.auth != null;
         allow write: if request.auth != null && request.auth.uid == followerId;
      }
    }
    
    // PUBLISHED RECIPES
    // - Any authenticated user can read all published recipes.
    // - A user can create a new published recipe if they are authenticated and their email is verified.
    // - A user can only delete their own published recipes.
    match /published_recipes/{recipeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.token.email_verified == true;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.publisherId;
    }
  }
}
