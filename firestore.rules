rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Admins Collection: Only other admins can manage this collection.
    match /admins/{userId} {
      allow read, write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Usernames Collection: Ensures usernames are unique.
    match /usernames/{username} {
      allow read;
      allow create: if request.auth != null;
      // Prevent users from changing the userId associated with a username.
      allow update, delete: if false; 
    }

    // Users Collection: Manages user profile data.
    match /users/{userId} {
      // Anyone can read a user's profile
      allow get;
      // Logged-in users can list profiles (for search, suggestions)
      allow list: if request.auth != null;
      // Users can only create and update their own profile.
      allow create, update: if request.auth != null && request.auth.uid == userId;

      // Subcollections for a user
      match /recipes/{recipeId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /menus/{menuId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /following/{followedId} {
         allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /followers/{followerId} {
         allow read: if request.auth != null;
         // No one can directly write to the followers list. It's managed via the follow/unfollow process.
         allow write, delete: if false;
      }
       match /notifications/{notificationId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      match /savedPosts/{postId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Verification Requests: Users can create, admins can read/delete
    match /verification_requests/{requestId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow read, delete: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        allow update: if false;
    }

    // Published Recipes (Community Posts)
    match /published_recipes/{recipeId} {
      // Anyone can read posts.
      allow get;
      // Logged-in users can list posts.
      allow list: if request.auth != null;
      // Logged-in users can create posts.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.publisherId;
      // Users can only update/delete their own posts.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.publisherId;

      // Comments subcollection
      match /comments/{commentId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;

        // Likes on comments
        match /likes/{userId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }

      // Likes on posts
      match /likes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Stories Collection
    match /stories/{storyId} {
      // Allow read only for authenticated users (logic is handled in backend)
      allow get: if request.auth != null;
      // Logged-in users can create their own stories
      allow create: if request.auth != null && request.auth.uid == request.resource.data.publisherId;
      // Users can only delete their own stories
      allow delete: if request.auth != null && request.auth.uid == resource.data.publisherId;
      // Stories are immutable
      allow update: if false;
    }
  }
}
