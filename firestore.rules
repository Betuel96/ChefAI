rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read public profile data of any user.
    // Users can only create their own profile document and update their own.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // No one can delete a user document from the client.
      allow delete: if false;

      // Recipes are private to the user.
      match /recipes/{recipeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Menus are private to the user.
      match /menus/{menuId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Users can manage their own following list.
      match /following/{targetUserId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Followers list can be read by anyone, but only written to via the follow/unfollow logic.
      // The `followUser` function writes to `users/{targetUserId}/followers/{currentUserId}`.
      // So the user writing is the `currentUserId`.
      match /followers/{followerId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == followerId;
      }
    }

    // Published recipes can be read by anyone.
    // Only authenticated users with a verified email can create recipes.
    // Only the owner can update or delete their recipe.
    match /published_recipes/{recipeId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.token.email_verified == true;
      allow update, delete: if request.auth != null && resource.data.publisherId == request.auth.uid;
    }
  }
}
