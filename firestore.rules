
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // usernames collection: used for unique username checks
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if false; // Prevent users from changing or deleting usernames directly
    }

    // users collection: user profiles
    match /users/{userId} {
      allow read: if true; // Allow anyone to read user profiles
      allow create: if isOwner(userId); // Allow a user to create their own profile
      allow update: if isOwner(userId); // Allow a user to update their own profile
      
      // Subcollections for a user
      match /recipes/{recipeId} {
        allow read, write, delete: if isOwner(userId);
      }
      match /menus/{menuId} {
        allow read, write, delete: if isOwner(userId);
      }
       match /savedPosts/{postId} {
        allow read, write, delete: if isOwner(userId);
      }
      match /followers/{followerId} {
        allow read: if true;
        allow create, delete: if isAuthenticated();
      }
       match /following/{followingId} {
        allow read: if true;
        allow create, delete: if isOwner(userId);
      }
       match /notifications/{notificationId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // published_recipes collection: public posts (recipes, menus, text)
    match /published_recipes/{postId} {
      allow read: if true; // Anyone can read posts
      allow create: if isAuthenticated(); // Authenticated users can create posts
      allow update: if isAuthenticated() && isOwner(resource.data.publisherId); // Only the owner can update their post
      allow delete: if isAuthenticated() && isOwner(resource.data.publisherId); // Only the owner can delete their post

      // Subcollections for a post (comments, likes)
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(resource.data.userId); // Only comment owner can edit/delete
        
        // Likes on comments
        match /likes/{likeId} {
            allow read: if true;
            allow create, delete: if isAuthenticated() && isOwner(likeId);
        }
      }
      match /likes/{userId} {
        allow read: if true;
        allow create, delete: if isOwner(userId);
      }
    }
    
    // stories collection
    match /stories/{storyId} {
        // Anyone can read stories, but only for 24 hours (enforced by client/backend logic)
        allow read: if true;
        // Only authenticated users can create stories
        allow create: if isAuthenticated();
        // Only the owner can delete their story
        allow delete: if isAuthenticated() && isOwner(resource.data.publisherId);
        // Stories are immutable
        allow update: if false;
    }
    
    // admins collection: for admin panel access control
    match /admins/{adminId} {
        allow read: if isAuthenticated() && isOwner(adminId);
    }
    
    // verification_requests collection
    match /verification_requests/{requestId} {
        allow create: if isAuthenticated(); // User can create their own request
        allow read, write, delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid)); // Only admins can manage requests
    }
  }
}
