
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin status
    function isAdmin() {
      // Use path() to correctly reference the document path
      return exists(path(/databases/$(database)/documents/admins/request.auth.uid));
    }
    
    // Admins: Only other admins can read/write the list of admins.
    match /admins/{userId} {
      allow read, write: if isAdmin();
    }
    
    // Usernames: Ensure unique usernames.
    match /usernames/{username} {
      allow read;
      allow create: if !exists(path(/databases/$(database)/documents/usernames/username));
      allow delete: if request.auth.uid == get(path(/databases/$(database)/documents/usernames/username)).data.userId;
    }

    // Users: Users can read public profiles and their own. They can only update their own profile.
    match /users/{userId} {
      allow get: if request.auth.uid != null; // Any authenticated user can get a profile
      allow list: if request.auth.uid != null; // Allow listing users for search/suggestions
      allow create, update: if request.auth.uid == userId;
      
      // Subcollections for a user
      match /{subcollection}/{docId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Published Content (Recipes, Menus, Text Posts)
    match /published_recipes/{postId} {
      // Anyone can read a post if it's public, or if they are the author.
      allow get: if resource.data.profileType == 'public' || request.auth.uid == resource.data.publisherId;
      // Authenticated users can create posts.
      allow create: if request.auth.uid != null;
      // Only the author can update or delete their own post.
      allow update, delete: if request.auth.uid == resource.data.publisherId;

      // Comments and Likes subcollections for posts
      match /{subcollection}/{docId} {
        allow read, create, update, delete: if request.auth.uid != null;
        
        // Likes within a comment
        match /likes/{likeId} {
          allow read, create, delete: if request.auth.uid != null;
        }
      }
    }
    
    // Stories: Can be read by anyone, but only created/deleted by the publisher.
    // Logic for "only followers" would be more complex and require reading user profiles.
    match /stories/{storyId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.publisherId;
      allow delete: if request.auth.uid == resource.data.publisherId;
    }

    // Verification Requests
    match /verification_requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, write: if isAdmin(); // Only admins can manage requests
    }
  }
}
