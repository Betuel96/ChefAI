
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS collection
    match /users/{userId} {
      // Anyone can create their own user document (on signup)
      allow create: if request.auth.uid == userId;
      // Only the owner can read or update their own profile
      allow read, update: if isOwner(userId);

      // Subcollections for user-specific data (recipes, menus)
      match /{collection}/{docId} {
        // Users can create, read, update, and delete their own documents
        allow read, write, delete: if isOwner(userId);
      }
      
      // Subcollections for following/followers
      match /followers/{followerId} {
          allow read, create: if isAuthenticated();
          allow delete: if isOwner(userId) || isOwner(followerId);
      }
      match /following/{followingId} {
          allow read, create: if isAuthenticated();
          allow delete: if isOwner(userId) || isOwner(followingId);
      }
    }

    // PUBLISHED_RECIPES collection
    match /published_recipes/{recipeId} {
      // Any authenticated user can read all published recipes
      allow read: if isAuthenticated();
      // Users can only create recipes if they are the publisher specified in the document
      allow create: if isAuthenticated() && request.resource.data.publisherId == request.auth.uid;
      // Only the original publisher can update or delete their recipe
      allow update, delete: if isAuthenticated() && resource.data.publisherId == request.auth.uid;
    }
  }
}
