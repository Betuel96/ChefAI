
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /usernames/{username} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    match /users/{userId} {
      // Any signed-in user can view any profile.
      allow get, list: if isSignedIn();
      
      // A user can create and update their own profile.
      allow create, update: if isOwner(userId);
      allow delete: if false; // Typically only admins should delete users.

      // Subcollections are private to the owner.
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    match /published_recipes/{postId} {
      function isPublicPost() {
        return resource.data.profileType == 'public';
      }
      function isFollower(publisherId) {
        return exists(/databases/$(database)/documents/users/$(publisherId)/followers/$(request.auth.uid));
      }

      // Allow read if: public post, or owner, or follower of private profile.
      allow get: if isPublicPost() || (isSignedIn() && (isOwner(resource.data.publisherId) || isFollower(resource.data.publisherId)));
      // Allow listing of public posts.
      allow list: if isSignedIn();
      
      allow create: if isSignedIn() && request.resource.data.publisherId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.publisherId);
      allow delete: if isSignedIn() && isOwner(resource.data.publisherId);

      // Comments and Likes
      match /{subcollection}/{docId} {
        allow read: if isPublicPost() || (isSignedIn() && (isOwner(resource.data.publisherId) || isFollower(resource.data.publisherId)));
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && isOwner(request.resource.data.userId);
      }
    }
  }
}
