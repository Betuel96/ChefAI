rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return exists(path(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }

    // Admins collection: only other admins can read/write
    match /admins/{userId} {
      allow read, write: if isAdmin();
    }
    
    // Usernames: Ensure uniqueness
    match /usernames/{username} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth.uid == resource.data.userId;
    }
    
    // Users: Public data readable by anyone, private data only by the user themselves
    match /users/{userId} {
      allow get; // Allow reading single user profiles
      allow list: if request.auth != null; // Allow listing users for suggestions/search if logged in
      allow create: if request.auth.uid == userId; // Allow user to create their own profile
      allow update: if request.auth.uid == userId || isAdmin(); // Allow user to update their own profile, or admin to update it
      
      // Recipes and Menus subcollections
      match /{subcollection}/{docId} {
        allow read, write: if request.auth.uid == userId;
      }

      // Notifications: only readable/writable by the owner
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }
    
    // Published Content (Recipes/Posts)
    match /published_recipes/{postId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.publisherId;
      allow update: if request.auth.uid == resource.data.publisherId || isAdmin();
      allow delete: if request.auth.uid == resource.data.publisherId || isAdmin();
      
      // Comments and Likes on posts
      match /{subcollection}/{subDocId} {
      	allow read;
        allow write: if request.auth != null;
        
        // Likes on comments
        match /likes/{likeId} {
            allow read;
            allow write: if request.auth != null;
        }
      }
    }

    // Stories collection
    match /stories/{storyId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.publisherId;
      allow delete: if request.auth.uid == resource.data.publisherId;
    }

    // Verification Requests
    match /verification_requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, write: if isAdmin();
    }
  }
}
