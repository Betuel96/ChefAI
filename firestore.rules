rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Usernames collection: Ensure usernames are unique
    match /usernames/{username} {
        allow read;
        allow create: if isAuthenticated();
        // Disallow updates, allow deletion only if the corresponding user doc is being deleted
        allow update: if false;
        allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
    }

    // Users collection
    match /users/{userId} {
      // Anyone can get a specific user's profile
      allow get;
      // Any authenticated user can list users (for search and suggestions)
      allow list: if isAuthenticated();
      // Users can only create their own profile
      allow create: if isOwner(userId);
      // Users can only update their own profile
      allow update: if isOwner(userId);
      // Users cannot delete their own profile through the app
      allow delete: if false;

      // Subcollections for a user
      match /recipes/{recipeId} {
        allow read, write: if isOwner(userId);
      }
      match /menus/{menuId} {
        allow read, write: if isOwner(userId);
      }
      match /savedPosts/{postId} {
        allow read, write: if isOwner(userId);
      }
      match /following/{followedId} {
          allow read, write: if isOwner(userId);
      }
      match /followers/{followerId} {
          allow read: if isAuthenticated();
          // Writes are handled by the follow/unfollow logic, not direct writes here
          allow write: if false;
      }
       match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Published content collection
    match /published_recipes/{postId} {
        // Allow reads if the post is public, or if the reader is the owner
        allow get: if resource.data.profileType == 'public' || isOwner(resource.data.publisherId);
        // Allow list for public feeds
        allow list: if isAuthenticated();
        
        allow create: if isOwner(request.resource.data.publisherId);
        allow update: if isOwner(resource.data.publisherId);
        allow delete: if isOwner(resource.data.publisherId);

        // Comments and Likes subcollections
        match /comments/{commentId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated();
            allow update, delete: if isOwner(resource.data.userId);
            
            match /likes/{likeId} {
                allow read: if isAuthenticated();
                allow create, delete: if isOwner(likeId);
            }
        }

        match /likes/{likeId} {
            allow read: if isAuthenticated();
            allow create, delete: if isOwner(likeId);
        }
    }
    
    // Stories collection (lasts 24h)
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.publisherId);
      // Stories cannot be updated or deleted from client
      allow update, delete: if false;
    }
    
    // Verification Requests
    match /verification_requests/{requestId} {
    	allow create: if isAuthenticated();
      // Admins should handle these via backend functions, not direct access
      allow read, update, delete: if false;
    }

    // Admins Collection (for admin panel access check)
    match /admins/{adminId} {
      allow get: if isAuthenticated();
    }
  }
}